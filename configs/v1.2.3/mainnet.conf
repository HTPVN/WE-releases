node {
  # Type of cryptography
  waves-crypto = yes

  # Node owner address
  owner-address = " /FILL/ "

  # Waves "home" and data directories to store the state
  directory = "/node"
  data-directory = ${node.directory}"/data"

  # Location and name of a license file
  license.file = ${node.directory}"/license/node.license"

  wallet {
    # Path to keystore file
    file = "/node/keystore.dat"
    
    # Access password
    password = " /FILL/ "
  }

  # Blockchain settings
  # Mainnet blockchain settings (should match on all nodes for consistency)
  blockchain.type = MAINNET

  # Application logging level. Could be DEBUG | INFO | WARN | ERROR. Default value is INFO.
  logging-level = DEBUG

  # P2P Network settings
  network {
    # Network address
    bind-address = "0.0.0.0"

    # Port number
    port = 6864

    # Peers network addresses and ports
    known-peers = ["node-0.wavesenterprise.com:6864", "node-1.wavesenterprise.com:6864", "node-2.wavesenterprise.com:6864"]

    # Node name to send during handshake. Comment this string out to set random node name.
    #   Example: node-name = "your-we-node-name"
    node-name = " /FILL/ "

    # How long the information about peer stays in database after the last communication with it
    peers-data-residence-time = 2h

    # Breaks a connection if there is no message from the peer during this timeout
    break-idle-connections-timeout = 3m

    # String with IP address and port to send as external address during handshake. Could be set automatically if uPnP is enabled.
    declared-address = "0.0.0.0:6864"
  }

  # Node's REST API settings
  rest-api {
    enable = yes
    bind-address = "0.0.0.0"
    port = 6862

    auth {
      # Available types: api-key or oauth2. The second one requires installing OAuth2 service. Please, refer to the docs for info.
      type: "api-key"

      # Hashed secret Api-Key to access node's REST API
      api-key-hash = " /FILL/ "

      # Api-key hash for Privacy Data Exchange REST API methods
      privacy-api-key-hash = " /FILL/ "
    }
  }

  # New blocks generator settings
  miner {
    enable = yes
    quorum = 2
    interval-after-last-block-then-generation-is-allowed = 35d
    micro-block-interval = 5s
    min-micro-block-age = 3s
    max-transactions-in-micro-block = 500
    minimal-block-generation-offset = 200ms
  }

  # Anchoring settings
  scheduler-service.enable = no

  # Settings for Privacy Data Exchange
  # Uncomment and fill to enable
  #  privacy {
  #    # Max parallel data crawling tasks
  #    crawling-parallelism = 100
  #
  #    storage {
  #      enabled = true
  #      url = "jdbc:postgresql://"${POSTGRES_ADDRESS}":"${POSTGRES_PORT}"/"${POSTGRES_DB}
  #      driver = "org.postgresql.Driver"
  #      profile = "slick.jdbc.PostgresProfile$"
  #
  #      user = ${POSTGRES_USER}
  #      password = ${POSTGRES_PASSWORD}
  #      connectionPool = HikariCP
  #      connectionTimeout = 5000
  #      connectionTestQuery = "SELECT 1"
  #      queueSize = 10000
  #      numThreads = 20
  #      schema = "public"
  #      migration-dir = "db/migration"
  #    }
  #  }

  # Docker smart-contracts engine config
  docker-engine {
    # Docker smart contracts enabled flag
    enable = yes

    # For starting contracts in a local docker
    use-node-docker-host = yes

    default-registry-domain = "registry.wavesenterprise.com/waves-enterprise-public"

    # Basic auth credentials for docker host
     #docker-auth {
     #  username = "some user"
     #  password = "some password"
     #}

    # Optional connection string to docker host
     docker-host = "unix:///var/run/docker.sock"

    # Optional string to node REST API if we use remote docker host
    # node-rest-api = "node-0"

    # Execution settings
    execution-limits {
      # Contract execution timeout
      timeout = 30s
      # Memory limit in Megabytes
      memory = 512
      # Memory swap value in Megabytes (see https://docs.docker.com/config/containers/resource_constraints/)
      memory-swap = 0
    }

    # Reuse once created container on subsequent executions
    reuse-containers = yes

    # Remove container with contract after specified duration passed
    remove-container-after = 10m

    # Remote registries auth information
    remote-registries = []

    # Check registry auth on node startup
    check-registry-auth-on-startup = yes

    # Contract execution messages cache settings
    contract-execution-messages-cache {
      # Time to expire for messages in cache
      expire-after = 60m
      # Max number of messages in buffer. When the limit is reached, the node processes all messages in batch
      max-buffer-size = 10
      # Max time for buffer. When time is out, the node processes all messages in batch
      max-buffer-time = 100ms
    }
  }
}